// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: live.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveClassService_CreateLiveClass_FullMethodName     = "/proto.LiveClassService/CreateLiveClass"
	LiveClassService_JoinLiveClass_FullMethodName       = "/proto.LiveClassService/JoinLiveClass"
	LiveClassService_SendMessage_FullMethodName         = "/proto.LiveClassService/SendMessage"
	LiveClassService_EndLiveClass_FullMethodName        = "/proto.LiveClassService/EndLiveClass"
	LiveClassService_PublishQuestion_FullMethodName     = "/proto.LiveClassService/PublishQuestion"
	LiveClassService_SubmitAnswer_FullMethodName        = "/proto.LiveClassService/SubmitAnswer"
	LiveClassService_GetMessages_FullMethodName         = "/proto.LiveClassService/GetMessages"
	LiveClassService_GetAnswerStatistics_FullMethodName = "/proto.LiveClassService/GetAnswerStatistics"
)

// LiveClassServiceClient is the client API for LiveClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义直播课服务
type LiveClassServiceClient interface {
	// 创建直播课
	CreateLiveClass(ctx context.Context, in *CreateLiveClassRequest, opts ...grpc.CallOption) (*CreateLiveClassResponse, error)
	// 加入直播课（双向流）
	JoinLiveClass(ctx context.Context, in *JoinLiveClassRequest, opts ...grpc.CallOption) (*JoinLiveClassResponse, error)
	// 发送消息
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// 结束直播课
	EndLiveClass(ctx context.Context, in *EndLiveClassRequest, opts ...grpc.CallOption) (*EndLiveClassResponse, error)
	// 发布题目
	PublishQuestion(ctx context.Context, in *PublishQuestionRequest, opts ...grpc.CallOption) (*PublishQuestionResponse, error)
	// 提交答案
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	// 获取答题结果统计（流式接口）
	GetAnswerStatistics(ctx context.Context, in *GetAnswerStatisticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnswerStatistics], error)
}

type liveClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveClassServiceClient(cc grpc.ClientConnInterface) LiveClassServiceClient {
	return &liveClassServiceClient{cc}
}

func (c *liveClassServiceClient) CreateLiveClass(ctx context.Context, in *CreateLiveClassRequest, opts ...grpc.CallOption) (*CreateLiveClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLiveClassResponse)
	err := c.cc.Invoke(ctx, LiveClassService_CreateLiveClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) JoinLiveClass(ctx context.Context, in *JoinLiveClassRequest, opts ...grpc.CallOption) (*JoinLiveClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinLiveClassResponse)
	err := c.cc.Invoke(ctx, LiveClassService_JoinLiveClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, LiveClassService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) EndLiveClass(ctx context.Context, in *EndLiveClassRequest, opts ...grpc.CallOption) (*EndLiveClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndLiveClassResponse)
	err := c.cc.Invoke(ctx, LiveClassService_EndLiveClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) PublishQuestion(ctx context.Context, in *PublishQuestionRequest, opts ...grpc.CallOption) (*PublishQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishQuestionResponse)
	err := c.cc.Invoke(ctx, LiveClassService_PublishQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, LiveClassService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, LiveClassService_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClassServiceClient) GetAnswerStatistics(ctx context.Context, in *GetAnswerStatisticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnswerStatistics], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LiveClassService_ServiceDesc.Streams[0], LiveClassService_GetAnswerStatistics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAnswerStatisticsRequest, AnswerStatistics]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveClassService_GetAnswerStatisticsClient = grpc.ServerStreamingClient[AnswerStatistics]

// LiveClassServiceServer is the server API for LiveClassService service.
// All implementations must embed UnimplementedLiveClassServiceServer
// for forward compatibility.
//
// 定义直播课服务
type LiveClassServiceServer interface {
	// 创建直播课
	CreateLiveClass(context.Context, *CreateLiveClassRequest) (*CreateLiveClassResponse, error)
	// 加入直播课（双向流）
	JoinLiveClass(context.Context, *JoinLiveClassRequest) (*JoinLiveClassResponse, error)
	// 发送消息
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// 结束直播课
	EndLiveClass(context.Context, *EndLiveClassRequest) (*EndLiveClassResponse, error)
	// 发布题目
	PublishQuestion(context.Context, *PublishQuestionRequest) (*PublishQuestionResponse, error)
	// 提交答案
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	// 获取答题结果统计（流式接口）
	GetAnswerStatistics(*GetAnswerStatisticsRequest, grpc.ServerStreamingServer[AnswerStatistics]) error
	mustEmbedUnimplementedLiveClassServiceServer()
}

// UnimplementedLiveClassServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveClassServiceServer struct{}

func (UnimplementedLiveClassServiceServer) CreateLiveClass(context.Context, *CreateLiveClassRequest) (*CreateLiveClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveClass not implemented")
}
func (UnimplementedLiveClassServiceServer) JoinLiveClass(context.Context, *JoinLiveClassRequest) (*JoinLiveClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLiveClass not implemented")
}
func (UnimplementedLiveClassServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLiveClassServiceServer) EndLiveClass(context.Context, *EndLiveClassRequest) (*EndLiveClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLiveClass not implemented")
}
func (UnimplementedLiveClassServiceServer) PublishQuestion(context.Context, *PublishQuestionRequest) (*PublishQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishQuestion not implemented")
}
func (UnimplementedLiveClassServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedLiveClassServiceServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedLiveClassServiceServer) GetAnswerStatistics(*GetAnswerStatisticsRequest, grpc.ServerStreamingServer[AnswerStatistics]) error {
	return status.Errorf(codes.Unimplemented, "method GetAnswerStatistics not implemented")
}
func (UnimplementedLiveClassServiceServer) mustEmbedUnimplementedLiveClassServiceServer() {}
func (UnimplementedLiveClassServiceServer) testEmbeddedByValue()                          {}

// UnsafeLiveClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveClassServiceServer will
// result in compilation errors.
type UnsafeLiveClassServiceServer interface {
	mustEmbedUnimplementedLiveClassServiceServer()
}

func RegisterLiveClassServiceServer(s grpc.ServiceRegistrar, srv LiveClassServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveClassServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveClassService_ServiceDesc, srv)
}

func _LiveClassService_CreateLiveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLiveClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).CreateLiveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_CreateLiveClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).CreateLiveClass(ctx, req.(*CreateLiveClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_JoinLiveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLiveClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).JoinLiveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_JoinLiveClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).JoinLiveClass(ctx, req.(*JoinLiveClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_EndLiveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLiveClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).EndLiveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_EndLiveClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).EndLiveClass(ctx, req.(*EndLiveClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_PublishQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).PublishQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_PublishQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).PublishQuestion(ctx, req.(*PublishQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveClassServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveClassService_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveClassServiceServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveClassService_GetAnswerStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAnswerStatisticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveClassServiceServer).GetAnswerStatistics(m, &grpc.GenericServerStream[GetAnswerStatisticsRequest, AnswerStatistics]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LiveClassService_GetAnswerStatisticsServer = grpc.ServerStreamingServer[AnswerStatistics]

// LiveClassService_ServiceDesc is the grpc.ServiceDesc for LiveClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LiveClassService",
	HandlerType: (*LiveClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiveClass",
			Handler:    _LiveClassService_CreateLiveClass_Handler,
		},
		{
			MethodName: "JoinLiveClass",
			Handler:    _LiveClassService_JoinLiveClass_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _LiveClassService_SendMessage_Handler,
		},
		{
			MethodName: "EndLiveClass",
			Handler:    _LiveClassService_EndLiveClass_Handler,
		},
		{
			MethodName: "PublishQuestion",
			Handler:    _LiveClassService_PublishQuestion_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _LiveClassService_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _LiveClassService_GetMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAnswerStatistics",
			Handler:       _LiveClassService_GetAnswerStatistics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "live.proto",
}
